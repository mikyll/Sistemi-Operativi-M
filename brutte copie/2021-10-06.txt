slide 36

RIPASSINO

avevamo visto esempio in cui

una soluzione al problema dell'elab dei file si può fare sia in modo sequenziale che non sequenziale, che come abbiamo visto può essere descritto da un grafo di precedenza ad ordinamento parziale.

obbiettivo: mostrare che ci sono, in soluzioni a problemi di questo tipo, delle attività/opearzioni che sono svincolate le une dalle altre da vincoli di precedenza.

nella realtà, quando andiamo a tradurre un algoritmo sequenziiale in un programma, dobbiamo tenere in conto che i linguaggi che ci permettono di modellare algoritmi di questo tipo prevedono come modulo unitario l'esecuzione di sequenze di istruzioni.

nella traduzione di un alg non sequenziale in programma concorrente corrispondente lo sforzo dev'essere orientato a ricavare una collezione di grafi ad ordinamento totale.

Come visto ieri una possibile soluzione è individuare 3 sotto-grafi: uno rappresentato dall'insieme degli eventi che si occupano della lettura del primo file, il secondo dalle sequenze che si occupano dell'elab, il terzo della scrittura.

Ciò che abbiamo osservato ieri è che questi 3 processi sequenziali non sono indipendenti tra loro, in quanto hanno degli archi fra di loro (che rappresentano vincoli di precedenza) che vincolano i nodi fra loro.
Questi archi significano che, ad esempio, non si può elaborare un record di un file file prima di averlo letto.


caso migliore in cui posso suddividere il grafo di precedenza in collezione di processi la maggiorparte sono sperabilmente indipendenti fra loro, ma di solito ottieniamo una serie di processi sequenziali legati fra loro da vincoli di precedenza. Questi vincoli esprimono, quando traduciamo in programma, delle interazioni che avvengono tra un processo e l'altro.


obbiettivo è ricavare dal grafo di partenza un insieme di processi sequenziali.

decomposizione orizzontale o verticale? Qual è preferibile? Entrambe posono esser giuste,
se però divido in modo orizzontale, ho un numero di processi pari al numero di record di file che bisogna elaborare. L'interazione in questo caso non è a scambio di messaggi ma esprime solo un vincolo di precedenza temporale.

La scelta è arbitraria e dipende dalle caratteristiche dell'applicazione che dobbiamo realizzare (dipende dal costo - se il costo di creazione di un processo è particolarmente alta, questa soluzione non è conventiente; se il costo è maggiore nello scambio di messaggi, allora non conviene la soluzione precedente)

soluzione verticale: comunicazione tramite scambio di messaggi;
soluzione orrizzontale: comunicazione tramite regole di precedenza

una linea guida abbastanza sensata, a meno che di presenza di specifiche date dall'architettura, è limitare le interazioni, in quanto questo solitamente è implementato tramite system call, ovvero si passa da user mode a kernel mode, e questo è un po' costoso.

-- fine ripassino


Interazione tra processi
A livello molto generale, quando parlo di programmi concorrenti, abbiamo la possibilità di rilevare diverse forme di interazioni:
- cooperazione, insieme di interazioni che in qualche modo sono dettate dall'algoritm; ogni arco esprime un vincolo di dipendenza temporale e una forma di cooperazione, in quanto è un'interazione che in qualche modo è descritta dall'algoritmo e appartiene all'algoritmo, è insita nella logica che vogliamo rappresentare. Si può esprimere in 2 modi:
    - scambio di forma di intearzione che esprime solo ed unicamente un vincolo di precedenza (sincronizzazione pura);
    - scambio di dati;
    In entrambi i casi esiste comunque un vincolo di precedenza tra eventi di processi diversi.

Esempio di scambio di segnali temporali
- competizione,
- interferenza (solitamente si cerca di eliminare o escludere)

ogni arco esprime un'interazione, che può determinare un effetto sul processo destinatario di tale interazione. (sia che sia scambio di messaggi o segnali temporali)

c'è relazione di causa-effetto tra invio del segnale temporale e la ricezione da parte del processo ricevente.

Se c'è comunicazione rimane comunque il vincolo di precedenza

Caratteristiche linguaggio concorrente:
oltre a fornire opportuni costrutti che consentono di definire processi concorrenti (processi seq che concorrono all'esecuzione dell'algoritmo) dovrà fornire anche costrutti che consentono di specificare l'interazione (sincronizzazione o semplice invio di segnali temporali) ed eventualmente comunicazione tra processi.

COMPETIZIONE
ci possono essere vincoli di precedenza dati dall'architettura su cui si esegue.

Caso in cui consideriamo le risorse disponibili nell'ambiente di esecuzione. Sappiamo benissimo che un processo può utilizzare determinate risorse disponibili nell'ambiente in cui esegue (risorse fisiche, logiche o anche risorse mappate in memoria centrale, a cui fanno riferimento i processi in esecuzione).

In certi casi, le risorse non possono essere usate contemporaneamente da più processi senza alcun vincolo. Ci sono risorse che per loro natura possono essere usate al più da un processo alla volta. Questo impone che l'ambiente di esecuzione controlli che i processi che richiedono accesso a quella risorsa rispettino questa regola.

Il controllo può determinare l'imposizione di vincoli di sincronizzazione (se una risorsa può essere usata da un processo alla volta, nella fase in cui sta venendo usata da un processo, nessun altro può utilizzarla) - ciò implica una forma di interazione in più,
un processo che tenta di accedere ad una risorsa già impegnata dev'essere bloccato (se non rispetta certi vincoli).

È un'interazione prevedibile, ma non è desiderabile perché non fa parte dell'algoritmo che quella logica implementato

Es: mutua esclusione. Molte risorse possono essere usate da non più di un processo alla volta.
Supponiamo di avere due processi P e Q (magari possono fare parte di applicazioni diverse) e supponiamo che abbiano bisogno di accedere ad una stampante comune
Supponiamo che P acceda alla stampante con sequenza di istruzioni Ps1, Ps2, ..., PsN
stessa cosa Q

le due sequenze devono essere eseguite in modo mutuamente esclusivo: se P arriva ad usare la stampante prima di Q, dev'essere impedito al processo Q di iniziare la sequenza di istruzioni che gli permetta di utilizzare la stampante.

SEZIONE CRITICA
concetto di sezione critica:
per indicare sequenza di istruzioni con cui un processo accede ad una risorsa condivisa, ovviamente se tale risorsa è mutuamente esclusiva.
La sezione critica è dunque una sequenza di istruzioni, nel caso della stampante è l'insieme di istruzioni Ps1, Ps2, ..., PsN

ad ogni oggetto può essere associata una sola sezione critica, ma nel caso particolare, possono essere associate più di una sezione critica.

se su un oggetto vale la mutua esclusione, sezioni critiche appartenenti alla stessa classe non possono eseguire contemporaneamente


INTERFERENZA
Qualunque intearzione provocata da errori del programmatore - che non ha modellato correttamente l'interazione dei propri processi interagent. Esempio tipico: deadlock.



ARCHITETTURE E LINGUAGGI PER LA PROGRAMMAZIONE CONCORRENTE


[...]



offre in generale un certo numero di unità di elaborazione virtuali, che in generale possono essere maggiori, ma non sempre sono in numero sufficiente per supportare l'esecuzione di processi


all'interno dell'hardware andiamo a realizzare un processo di virtualizzazione dell'hardware: offriamo a chi utilizzerà il software una visione dell'elaboratore diversa da quella attuale.
In che modo viene realizzato questo processo di astrazione? Meccanismo di multiprogrammazione. La macchina fisica in generale può avere un numero limitato di unità di elaborazione. La macchina astratta deve offrire un meccanismo di multiprogrammazione. Il kernel del SO dà la possibilità ad ogni processo che viene creato all'interno di quell'ambiente di avere una visione diversa, come se avesse una CPU completamente dedicata.

devono essere previsti, oltre a meccanismi di sincronizzazioe anche quelli di protezione (controllo degli accessi alle risorse).
La parte gialla è una componente software che nella realtà è realizzata dal kernel del SO. Il SO indipendentemente dalle caratteristiche fisiche della macchina, offre l'illusione di avere una macchina con più di un'unità di elab: una per ogni processo che verrà messo in esecuzione contemporaneamente.

La multiprogrammazione è un insieme di meccanismi

La virtualizzazione che viene offerta dalla macchina astratta si basa sulle politiche di scheduling.

Di fatto, la macchina astratta M offre l'illusione del sistema composta da tante unità di elab quanti sono i processi che stanno eseguendo in quel sistema. Il meccanismo di interazione offre una visione di quella visione astratta, tale per cui possano all'occorrenza interagire tramite forme di sincronizzazione o comunicazione.

2 possibilità:
1. queste macchine astratte M sono collegate ad un'unica memoria principale.
La visione proposta è aderente al modello di multiprocessore, e sostanzialmente se queste sono le caratteristiche della macchina astratta, ovviamente il modello di interazione previsto sarà a memoria comune, perché è previsto che le unità di elab astratte/virtuali, prevedano la condivisione della memoria.

2. Altra possibilità: elaboratori astratti realizzati dalla macchina M non condividono memoria. Sono posti in collegamento da rete di comunicazione ma non hanno possibilità di accedere alle stesse aree di memoria.
Ciascuna di queste aree virtuali è fornito ad un certo processo, quindi l'interazione dovrà necessariamente basarsi sul modello a scambio di messaggi perché appunto non si dispone di memoria comune. Sarà compito della macchina M fornire dei meccanismi opportuni che consentano la comunicazione tra i processi che eseguono.


slide 55
Qualunque siano le caratteristiche della macchina astratta, il linguaggio di programmazione deve fornire costrutti che consentono di gestire i processi.

esistono 2 modelli diversi:

1. Fork/Join
È un modello nel quale sono disponibili almeno 2 primitive: 1 indicata col termine fork, una co ltermine join.

Fork serve per attivare un processo che inizia la propria esecuzione in parallelo con quella del processo chiamante
la differenza con la tradizione fork UNIX (non confondiamoci, qua la fork è un modello più generale),
è che qui si passa il codice di una funzione alla fork.

*grafico*

ogni volta che viene chiamata una fork si ha una biforcazione del grafo

Join: consente di sincronizzare un processo con la terminazione di un altro processo.
porsi in attesa del processo che è stato precedentemente creato.

Un nodo che rappresenta l'evento join, ha due predecessori.

nella join bisogna specificare il processo da attendere.

La wait invece si mette in attesa di uno qualunque dei figli.




esistono anche altri schemi, ad esempio:
cobegin/coend
alternativa del modello fork/join

trae ispirazione dai principi della programmazione strutturata.

esprime la concorrenza attraverso opportuni blocchi da inserire nel codice di opportuniprogrammi concorrenti.

cobegin - inizia blocco

coend - termina blocco

all'interno del blocco si può specificare una serie di operazioni, o una serie di processi (più generale)
la caratteristica degli statement in questo blocco è che ognuno di essi verrà eseguito concorrentemente rispetto agli altri di tale blocco.

NB: tali blocchi si possono innestare uno dentro l'altro.


tutti i grafi di precedenza possono essere espressi tramite fork/join, ma non tutti possono essere espressi con cobegin-coend



l'esecuzione di un programma è descritta da una traccia: è la sequenza degli stati attraversati dal programma
stato: insieme dei valori delle variabili definite nel programma + quelle implicite (es program counter, instruction register(?))

esecuzione di un programma è descritto dalla sua traccia


programmi descritti da un unico grafo nei quali i nodi sono legati da una realazione di ordinamento totale, si può dimostrare che ogni esecuzione di un programma P genera sempre e comunque la stessa traccia.
La verifica di ciò può essere fatta sperimentalmente (utilizzando un debugger)

ciò non vale per programmi concorrenti, in quanto lo scheduler non è deterministico.


oltre a proprietà di correttezza ci possono essere anche altre proprietà, di cui possono godere i programmi. Si classificano in 2 tipi:
safety properties - garantisce che durante l'esec di un programma non si entrerà mai in uno stato in cui questa proprietà non è verificata (ovvero le variabili assumono valori non desiderati);
liveness properties - garantisce che durante l'esec di un programma prima o poi si raggiungerà uno stato corretto rispetto a questa proprietà, ovvero le variabili assumono valori desiderati.

Nei programmi sequenziali la proprietà di correttezza a cui facevamo riferimento è che il programma sia corretto => safety;
ma anche proprietà di liveness, dobbiamo garantire la terminazione del programma, che prima o poi l'esecuzione termini.

Prossima volta vediamo le proprietà tipiche che vogliamo garantire per programmi sequenziali

in lab cominciamo lunedì 18

(l'orario del lunedì è errato)


